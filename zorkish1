// zorkish Game in C++
//author Justin Caddaye
//created August 2017
//Swinburne Games Programming

//incude input output stream
#include <iostream>

//include string functions
#include <string>

//standard library .h means header
#include <stdlib.h>

#include <thread>
#include <vector>

using namespace std;

//--------------------------------Forward_Declarations-------------------------------

class StateManager;
class chooseAdventureState;

//--------------------------------GLOBAL_VARIABLES-------------------------------

// declaring  variables:
//define a string outside a class makes it a global variable
string mystring;

char mychar;

//---------------------------------Item_Class---------------------------------

class Item {
public:

private:

	string itemName;
};

//---------------------------------Inventory_Class---------------------------------

class Inventory{

public:

	void addItem( const Item & item);
	void removeItem(int index);

private:

};

void Inventory :: addItem(const Item & item)
{

}

void Inventory::removeItem(int index) 
{

};


// --------------------------------PLayer_Character_Class-------------------------

class PlayerCharacter {

public:

	//functions

	void initialize(const string name);

	//accessors

	inline const string& getName() const { return this->characterName; }
	inline const double& getXpos() const { return this->xpos; }
	inline const double& getYpos() const { return this->ypos; }

	//modifiers

private:
	string characterName;
	double xpos;
	double ypos;

};

void PlayerCharacter::initialize(const string name)
{
	this->characterName = name;
}


// --------------------------------GameState_Class--------------------------------


//class GameState holds the stages of a gameState
class GameState {

public:
	virtual void input() = 0;

	// virtual means it can be passed through to another class- this is just a empty pattern
	virtual void render() = 0;

	//void determine();

	//friend class StateManager;

	void changeState(GameState* game);
};

// --------------------------------GameState Events--------------------------------


//inherits all member functions from from GameState 
//a game state i.e main menu state
//init can mean different things in different states
class mainMenuState : public GameState {

	StateManager* newState;

public:

	void input() {

		cin >> mychar;

	};

	//implement the changed state choice
	/*void changeState(GameState* gameState) {
		cout << "main menu change state";
		StateManager* newState;
		newState->changeState(gameState);
	};
*/
	//overrides GameState init() from other class
	void render() override {

		cout << "Zorkish::Main Menu" << endl;
		cout << "--------------------------------------------------------" << endl;
		cout << "Welcome to Zorkish Adventures" << endl;
		cout << "1. Select Adventure and Play" << endl;
		cout << "2. Hall Of Fame" << endl;
		cout << "3. Help" << endl;
		cout << "4. About" << endl;
		cout << "5. Quit" << endl;
		cout << "Select 1 - 5:> _" << endl;

	}
};


//choose adventure state class event
class chooseAdventureState : public GameState {
public:

	StateManager* newState;

	void input() { cin >> mychar; }

	void changeState(StateManager* newState) {
	}

	//overrides GameState init() from other class
	void render() override {

		cout << "--------------------------------------------------------"<< endl;
		cout << "Choose your adventure :" << endl;
		cout << "1. Mountain World" << endl;
		cout << "2. Water World" << endl;
		cout << "3. Box World" << endl;
		cout << "Select 1 - 3 :" << endl;
	}

};
//
class highScoreState : public GameState {
public:

	virtual void input() { cin >> mychar; };
	virtual void changeState(StateManager* newState) {
	};
	//overrides GameState init() from other class
	virtual void render() override {

		cout << "Zorkish::Hall Of Fame" << endl;
		cout << "--------------------------------------------------------" << endl;
		cout << "Top 10 Zorkish Adventure Champions" << endl;
		cout << "1. Fred, Mountain World, 5000" << endl;
		cout << "2. Mary, Mountain World, 4000" << endl;
		cout << "3. Joe, Water World, 3000" << endl;
		cout << "4. Henry, Mountain World, 2000" << endl;
		cout << "5. Susan, Mountain World, 1000" << endl;
		cout << "6. Alfred, Water World, 900" << endl;
		cout << "7. Clark, Mountain World, 800" << endl;
		cout << "8. Harold, Mountain World, 500" << endl;
		cout << "9. Julie, Water World, 300" << endl;
		cout << "10. Bill, Box World, -5" << endl;
		cout << "Press ESC or Enter to return to the Main Menu" << endl;
	}

};

//
class helpState : public GameState {
public:

	void input() override { cin >> mychar; };
	void changeState(StateManager* newState) {
	};
	//overrides GameState draw() from other class
	void render() override {

		cout << "Zorkish::Help" << endl;
		cout << "--------------------------------------------------------" << endl;
		cout << "The following commands are supported :" << endl;
		cout << "quit" << endl;
		cout << "hiscore(for testing)" << endl;
	}

};

//
class aboutState : public GameState {
public:

	virtual void input() override { cin >> mychar; };
	virtual void changeState(StateManager* newState) {
	};
	//overrides GameState init() from other class
	virtual void render() override {

		cout << "Zorkish::About" << endl;
		cout << "--------------------------------------------------------" << endl;
		cout << "Written by : Justin C" << endl;
		cout << "Press ESC or Enter to return to the Main Menu" << endl;
		cin >> mychar;
	}

};


// -----------------------------------StateManager Class--------------------------------

class StateManager {

public:

	//place a new gamestate into the vector
	void pushState(GameState* gameState);

	// take out (pop) a gamestate from the vector
	void popState(GameState* gameState);

	void render();

	void input();

	//void determine();

	//change the state with abstract gamestate param, but return nothing, 'void'
	void changeState(GameState* gameState);

private:
	//make a vector of the <Gamestates> called m_states , an array like object
	// this is private
	vector <GameState*> m_states;
};


// ------------------------------StateManager --------------------------------

// these get / set the StateManager class
// ' :: ' is a getter / setter - keyword
//sets the change state in stateManager
void StateManager::changeState(GameState* gameState) {

	//StateManager* newState;
	//if the m_states vector is not empty
	if (!m_states.empty())
	{
		//vector.pop_back removes last element from the array 
		// this loop empties the vector
		m_states.pop_back();

	}
	// push new vector to the back of the array.
	m_states.push_back(gameState);

	//change the actual state to be shown //
	//m_states.back()->changeState(gameState);
}

//puts the given state into last place on the array
void StateManager::pushState(GameState* gameState) {

	//if the m_states vector is not empty
	if (!m_states.empty())
	{
		//puts the value into the last place on the array
		m_states.push_back(gameState);

		//returns a reference to the last element in the array
		m_states.back();
	}
}

// :: = getter, setter
//removes the last element in the vector (array)
void StateManager::popState(GameState* gameState) {

	//if the m_states vector is not empty
	if (!m_states.empty())
	{
		//vector.pop_back removes last element from the array 
		m_states.pop_back();
	}
}

void StateManager::render()
{
	//if the m_states vector is not empty
	if (!m_states.empty())
	{
		// render the state
		m_states.back()->render();
	}
}

void StateManager::input()
{
	//if the m_states vector is not empty
	if (!m_states.empty())
	{
		//goto the last vector array item access input 
		m_states.back()->input();
	}
}

//void StateManager::determine()
//{
//	//if the m_states vector is not empty
//	if (!m_states.empty())
//	{
//		//goto the last vector array item access input 
//		m_states.back()->determine();
//	}
//}

// ------------------------------------------main--------------------------------

int main() {
	// makes a pointer to Gamestate
	GameState * gameState;

	////makes a new gamestate
	gameState = new mainMenuState();

	// make a new state called newState with a pointer *- instantiate
	StateManager* newState = new StateManager();

	//set/change the state to main menu
	newState->changeState(gameState);

	// while q isn't chosen
	while (mychar != 'q') {

		// draws the gameState
		newState->render();

		//gets imput
		newState->input();

		//newState->determine();

		//changes the state
		//newState->changeState(gameState);

		if (mychar == '1'){
			gameState = new chooseAdventureState();
			newState->changeState(gameState);
		}
		if (mychar == '2') {
			gameState = new helpState();
			newState->changeState(gameState);
		}
		if (mychar == '3') {
			gameState = new aboutState();
			newState->changeState(gameState);
		}
		if (mychar == '4') {
			gameState = new highScoreState();
			newState->changeState(gameState);
		}
		if (mychar == '5') {
			gameState = new mainMenuState();
			newState->changeState(gameState);
		}

	}

	return 0;
}
